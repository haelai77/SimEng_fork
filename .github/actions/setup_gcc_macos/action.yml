name: setup gcc
description: installs dependencies and correct gcc version to build and test simeng

inputs:
  LLVM-VERSION: 
    required: true
  OS:
    required: true
  gcc-version:
    required: true

runs:
  using: 'composite'
  steps:
    #######################################
    # Install dependencies required (cmake, etc).
    #######################################

    - name: install dependencies
      uses: ./.github/actions/setup_deps
      with:
        OS: ${{ inputs.OS }}

    # - name: install cmake
    #   shell: bash
    #   run: |
    #     brew install cmake

    #######################################
    # Restore gcc from cache.
    #######################################
    - name: restore gcc
      uses: actions/cache/restore@v4
      id: gcc-restore-v4
      with: 
        path: /usr/local/${{ inputs.gcc-version }}.5.0
        key: ${{ inputs.gcc-version }}-${{ inputs.OS }}

    #######################################
    # If restoring gcc set env vars for info step in OS_BUILD_TEST.yml.
    #######################################
    - if: ${{ steps.gcc-restore-v4.outputs.cache-hit == 'true' }}
      name: set env vars if restoring from cache
      shell: bash
      run: |
        echo "GCC_DIR=/usr/local/${{ inputs.gcc-version }}.5.0/bin/gcc" >> $GITHUB_ENV
        echo "CPP_DIR=/usr/local/${{ inputs.gcc-version }}.5.0/bin/g++" >> $GITHUB_ENV

    #######################################
    # Install gcc from source if not in cache.
    #######################################
    - if: ${{ steps.gcc-restore-v4.outputs.cache-hit != 'true' }}
      name: install gcc
      shell: bash
      run: |
        GCC_VER="${{ inputs.gcc-version }}.5.0"

        echo 'export PATH="/opt/local/bin:$PATH"' >> ~/.bash_profile
        source ~/.bash_profile

        ls /opt/local/bin

        sudo port install gcc10
        sudo port contents gcc10 
        which gcc10

        echo "GCC_DIR=/usr/local/$GCC_VER/bin/gcc" >> $GITHUB_ENV
        echo "CPP_DIR=/usr/local/$GCC_VER/bin/g++" >> $GITHUB_ENV

    #######################################
    # Save gcc to cache if earlier miss occured.
    #######################################
    - if: ${{ steps.gcc-restore-v4.outputs.cache-hit != 'true' }}
      name: save gcc
      uses: actions/cache/save@v4
      id: gcc-save-v4
      with: 
        path: /usr/local/${{ inputs.gcc-version }}.5.0
        key: ${{ inputs.gcc-version }}-${{ inputs.OS }}

    #######################################
    # Build SimEng without external llvm or ninja.
    #######################################
    - name: Build SimEng
      shell: bash
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DSIMENG_ENABLE_TESTS=ON -DSIMENG_OPTIMIZE=ON -DCMAKE_C_COMPILER=${{ env.GCC_DIR }} \
          -DCMAKE_CXX_COMPILER=${{ env.CPP_DIR }}

        cmake --build build -j $(sysctl -n hw.ncpu)

        cmake --build build --target install
