name: setup gcc
description: installs gcc of specified version

inputs:
  OS: 
    required: true
  gcc-version:
    required: true

runs:
  using: 'composite'
  steps:

    # - 
    #   name: Cache GCC ${{ inputs.gcc-version }}
    #   id: cache-gcc
    #   uses: actions/cache@v4
    #   with:
    #     path: ~/usr/local/gcc-${{ inputs.gcc-version }}
    #     key: gcc-${{ inputs.gcc-version }}-${{ inputs.os }}-${{ hashFiles('**/setup_gcc.sh') }}
    #     restore-keys: |
    #       gcc-${{ inputs.gcc-version }}-${{ inputs.os }}-


    - name: install prerequisites
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive

        # dependencies required to install cmake and build simeng

        apt-get update
        apt-get install -y wget
        apt-get install -y libz-dev
        apt-get install -y python3
        apt install -y build-essential
        apt install -y git
        apt install -y sudo
        apt-get install libssl-dev


        ### latest stable release of cmake

        wget https://github.com/Kitware/CMake/releases/download/v3.29.5/cmake-3.29.5.tar.gz
        tar zxvf cmake-3.29.5.tar.gz
        cd cmake-3.29.5
        ./bootstrap
        make
        make install

    - name: install ${{ inputs.gcc-version }}
      shell: bash
      run: |
        wget https://ftp.gnu.org/gnu/gcc/${{ inputs.gcc-version }}/${{ inputs.gcc-version }}.tar.gz > /dev/null 2>&1
        
        tar -xvf ${{ inputs.gcc-version }}.tar.gz > /dev/null 2>&1

        cd ${{ inputs.gcc-version }}
        pwd

        ./contrib/download_prerequisites > /dev/null

        ./configure --enable-languages=c,c++ --disable-multilib --with-system-zlib --prefix=$HOME/usr/local/${{ inputs.gcc-version }}

        make -j$(nproc)
        make install
    
    - name: build simeng
      shell: bash
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DSIMENG_ENABLE_TESTS=ON -DCMAKE_C_COMPILER=$HOME/usr/local/${{ inputs.gcc-version }}/bin/gcc -DCMAKE_CXX_COMPILER=$HOME/usr/local/${{ inputs.gcc-version }}/bin/c++
        cmake --build build -j
        sudo cmake --build build --target install
        echo "BUILT SIMENG"

    - if: ${{ inputs.gcc-version == 'gcc-8.3.0' && contains(inputs.OS, 'ubuntu') }}
      name: apply gcc 9.2 sanitizer patch to gcc 8.3
      shell: bash
      run: |
        apt-get install patch
        wget https://raw.githubusercontent.com/easybuilders/easybuild-easyconfigs/develop/easybuild/easyconfigs/g/GCCcore/GCCcore-9.2.0-fix-glibc-2.31-libsanitizer.patch
        cd ${{ inputs.gcc-version }}
        patch -p1 < /path/to/downloaded/GCCcore-9.2.0-fix-glibc-2.31-libsanitizer.patch

    - name: run tests
      shell: bash 
      run: |
        cd build
        mkdir test
        cd test
        ls ..

        echo "______ UNIT TESTS ______"
        ./unit/unittests --gtest_output=xml:unittests.xml
        echo "______ AARCH64 REGRESSION TESTS ______"
        ./regression/aarch64/regression-aarch64 --gtest_output=xml:regressiontests.xml
        echo "______ RISCV REGRESSION TESTS ______"
        ./regression/riscv/regression-riscv --gtest_output=xml:regressiontests.xml
