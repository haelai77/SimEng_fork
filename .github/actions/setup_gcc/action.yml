name: setup gcc
description: installs gcc of specified version

inputs:
  OS: 
    required: true
  gcc-version:
    required: true

env:
  cache_action_version: 4
  # OS: ${{ inputs.OS }}
  # gcc-version: ${{ inputs.gcc-version }}

runs:
  using: 'composite'
  steps:

    - name: install prerequisites
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive

        # dependencies required to install cmake and build simeng

        apt-get update
        apt-get install -y wget
        apt-get install -y libz-dev
        apt-get install -y python3
        apt install -y build-essential
        apt install -y git
        apt install -y sudo
        apt-get install libssl-dev
        apt-get install -y tree
    
    # cache with github action/cache
    - name: cmake restore
      id: cmake-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          /usr/local/bin/cmake
          /usr/local/bin/ctest
          /usr/local/share/cmake-3.29
        key: cmake-${{ matrix.OS }}

    - if: ${{ steps.cmake-restore.outputs.cache-hit != 'true' }}
      name: install cmake
      shell: bash
      run: |
        wget https://github.com/Kitware/CMake/releases/download/v3.29.5/cmake-3.29.5.tar.gz
        tar zxvf cmake-3.29.5.tar.gz
        cd cmake-3.29.5
        ./bootstrap
        make
        make install

    - if: ${{ steps.cmake-restore.outputs.cache-hit != 'true' }}
      name: cmake save
      id: cmake-save
      uses: actions/cache/save@v4
      with:
        path: |
          /usr/local/bin/cmake
          /usr/local/bin/ctest
          /usr/local/share/cmake-3.29
        key: cmake-${{ matrix.OS }}

    - name: gcc restore
      uses: actions/cache/restore@v4
      id: gcc-restore
      with: 
        path: |
          path: /github/home/usr/local/${{ inputs.gcc-version }}

        # $HOME/usr/local/${{ inputs.gcc-version }}
        # ./${{ inputs.gcc-version }}
        key: ${{ inputs.gcc-version }}-${{ inputs.OS }}

    - if: ${{ steps.gcc-restore.outputs.cache-hit != 'true' }}
      name: install ${{ inputs.gcc-version }}
      shell: bash
      run: |
        wget https://ftp.gnu.org/gnu/gcc/${{ inputs.gcc-version }}/${{ inputs.gcc-version }}.tar.gz > /dev/null 2>&1
        
        tar -xvf ${{ inputs.gcc-version }}.tar.gz > /dev/null 2>&1

        cd ${{ inputs.gcc-version }}
        
        if [[ "$gcc_version" == "gcc-8.3.0" && "$OS" == *"ubuntu"* ]]; then
          echo "Applying GCC 9.2 sanitizer patch to GCC 8.3"
          apt-get install -y patch
          wget https://raw.githubusercontent.com/easybuilders/easybuild-easyconfigs/develop/easybuild/easyconfigs/g/GCCcore/GCCcore-9.2.0-fix-glibc-2.31-libsanitizer.patch
          patch -p1 < ../GCCcore-9.2.0-fix-glibc-2.31-libsanitizer.patch
          echo "patched"
        fi

        ./contrib/download_prerequisites > /dev/null

        ./configure --enable-languages=c,c++ --disable-multilib --with-system-zlib --prefix=$HOME/usr/local/${{ inputs.gcc-version }}

        make -j$(nproc)
        make install

    - if: ${{ steps.gcc-restore.outputs.cache-hit != 'true' }}
      name: gcc save
      uses: actions/cache/save@v4
      id: gcc-save
      with: 
        # path: $HOME/usr/local/${{ inputs.gcc-version }}
        path: $HOME/usr/local/${{ inputs.gcc-version }}
        key: ${{ inputs.gcc-version }}-${{ inputs.OS }}
#/github/home/usr/local/gcc-9.3.0
    
    # - name: tree
    #   shell: bash
    #   run: |
    #     pwd | ls
    
    - name: build simeng
      shell: bash
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DSIMENG_ENABLE_TESTS=ON -DCMAKE_C_COMPILER=$HOME/usr/local/${{ inputs.gcc-version }}/bin/gcc -DCMAKE_CXX_COMPILER=$HOME/usr/local/${{ inputs.gcc-version }}/bin/c++
        cmake --build build -j
        
        echo "~~~~~ lookup gcc path ~~~~~"
        sudo cmake --build build --target install
        echo "~~~~~ BUILT SIMENG ~~~~~"
        sudo cmake --build build --target test ARGS="-V"
        echo "~~~~~ BUILT TESTS  ~~~~~"

    - name: echo /build
      shell: bash
      run: |
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        ls build
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

    # - if: ${{ inputs.gcc-version == 'gcc-8.3.0' && contains(inputs.OS, 'ubuntu') }}
    #   name: apply gcc 9.2 sanitizer patch to gcc 8.3
    #   shell: bash
    #   run: |
    #     apt-get install patch
    #     wget https://raw.githubusercontent.com/easybuilders/easybuild-easyconfigs/develop/easybuild/easyconfigs/g/GCCcore/GCCcore-9.2.0-fix-glibc-2.31-libsanitizer.patch
    #     # cd ${{ inputs.gcc-version }}
    #     patch -p1 < /path/to/downloaded/GCCcore-9.2.0-fix-glibc-2.31-libsanitizer.patch

    - name: run tests
      shell: bash 
      run: |
        pwd | ls
        ls build
        cd build
        # tree /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/test

        # echo "______ UNIT TESTS ______"
        # /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/test/unit/unittests --gtest_output=xml:unittests.xml
        # echo "______ AARCH64 REGRESSION TESTS ______"
        # /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/test/regression/aarch64/regression-aarch64 --gtest_output=xml:regressiontests.xml
        # echo "______ RISCV REGRESSION TESTS ______"
        # /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/test/regression/riscv/regression-riscv --gtest_output=xml:regressiontests.xml
