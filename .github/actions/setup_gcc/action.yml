name: setup gcc
description: installs dependencies and correct gcc version to build and test simeng

# https://askubuntu.com/questions/1140183/install-gcc-9-on-ubuntu-18-04

inputs:
  LLVM-VERSION: 
    required: true
  OS:
    required: true
  gcc-version:
    required: true

runs:
  using: 'composite'
  steps:
    - name: install dependencies
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive
        
        apt-get install -y software-properties-common
        add-apt-repository ppa:ubuntu-toolchain-r/test -y
        apt-get update
        
        apt-get install -y wget
        apt-get install -y libz-dev
        apt-get install -y python3
        apt install -y build-essential
        apt install -y git
        apt-get install libssl-dev
        apt-get install ninja-build
        apt-get install tree
    #######################################
    # check cache for llvm
    - if: ${{ inputs.OS == 'ubuntu:18.04' }}
      name: check for llvm cache
      id: llvm-restore-v3
      uses: actions/cache/restore@v3
      with:
        path: |
          /usr/lib/llvm-${{ inputs.LLVM-VERSION }}
        key: llvm-${{ inputs.LLVM-VERSION }}-${{ inputs.OS }}

    - if: ${{ inputs.OS == 'ubuntu:20.04' }}
      name: check for llvm cache
      id: llvm-restore-v4
      uses: actions/cache/restore@v4
      with:
        path: |
          /usr/lib/llvm-${{ inputs.LLVM-VERSION }}
        key: llvm-${{ inputs.LLVM-VERSION }}-${{ inputs.OS }}
    #######################################
    # install llvm if cache miss

    - if: ${{ steps.llvm-restore-v3.outputs.cache-hit != 'true' && steps.cmake-restore-v4.outputs.cache-hit != 'true' }}
      name: install llvm
      shell: bash
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        ./llvm.sh ${{ inputs.LLVM-VERSION }}

    #######################################
        # check cache for llvm
    - if: ${{ steps.llvm-restore-v3.outputs.cache-hit != 'true' && inputs.OS == 'ubuntu:18.04' }}
      name: check for llvm cache
      id: llvm-save-v3
      uses: actions/cache/save@v3
      with:
        path: |
          /usr/lib/llvm-${{ inputs.LLVM-VERSION }}
        key: llvm-${{ inputs.LLVM-VERSION }}-${{ inputs.OS }}

    - if: ${{ steps.llvm-restore-v4.outputs.cache-hit != 'true' && inputs.OS == 'ubuntu:20.04' }}
      name: check for llvm cache
      id: llvm-save-v4
      uses: actions/cache/save@v4
      with:
        path: |
          /usr/lib/llvm-${{ inputs.LLVM-VERSION }}
        key: llvm-${{ inputs.LLVM-VERSION }}-${{ inputs.OS }}

    #######################################
    # check cache for cmake
    - if: ${{ inputs.OS == 'ubuntu:18.04' }}
      name: cmake restore
      id: cmake-restore-v3
      uses: actions/cache/restore@v3
      with:
        path: |
          /usr/local/bin/cmake
          /usr/local/bin/ctest
          /usr/local/share/cmake-3.29
        key: cmake-${{ matrix.OS }}

    - if: ${{ inputs.OS == 'ubuntu:20.04' }}
      name: cmake restore
      id: cmake-restore-v4
      uses: actions/cache/restore@v4
      with:
        path: |
          /usr/local/bin/cmake
          /usr/local/bin/ctest
          /usr/local/share/cmake-3.29
        key: cmake-${{ matrix.OS }}
    #######################################
    # install cmake if cache miss
    - if: ${{ steps.cmake-restore-v3.outputs.cache-hit != 'true' && steps.cmake-restore-v4.outputs.cache-hit != 'true' }}
      name: install cmake
      shell: bash
      run: |
        wget https://github.com/Kitware/CMake/releases/download/v3.29.5/cmake-3.29.5.tar.gz
        tar zxvf cmake-3.29.5.tar.gz
        cd cmake-3.29.5
        ./bootstrap
        make
        make install
    #######################################
    # save to cmake to cache if cache miss
    - if: ${{ steps.cmake-restore-v3.outputs.cache-hit != 'true' && inputs.OS == 'ubuntu:18.04'}}
      name: cmake save
      id: cmake-save-v3
      uses: actions/cache/save@v3
      with:
        path: |
          /usr/local/bin/cmake
          /usr/local/bin/ctest
          /usr/local/share/cmake-3.29
        key: cmake-${{ matrix.OS }}

    - if: ${{ steps.cmake-restore-v4.outputs.cache-hit != 'true' && inputs.OS == 'ubuntu:20.04'}}
      name: cmake save
      id: cmake-save-v4
      uses: actions/cache/save@v4
      with:
        path: |
          /usr/local/bin/cmake
          /usr/local/bin/ctest
          /usr/local/share/cmake-3.29
        key: cmake-${{ matrix.OS }}
    #######################################
    # check for gcc in cache
    - if: ${{ inputs.OS == 'ubuntu:18.04' }}
      name: gcc restore
      uses: actions/cache/restore@v3
      id: gcc-restore-v3
      with: 
        path: /usr/local/${{ inputs.gcc-version }}
        key: ${{ inputs.gcc-version }}-${{ inputs.OS }}
    
    - if: ${{ inputs.OS == 'ubuntu:20.04' }}
      name: gcc restore
      uses: actions/cache/restore@v4
      id: gcc-restore-v4
      with: 
        path: /usr/local/${{ inputs.gcc-version }}
        key: ${{ inputs.gcc-version }}-${{ inputs.OS }}
    #######################################
    # if cache miss install gcc
    - if: ${{ steps.gcc-restore-v3.outputs.cache-hit != 'true' && steps.gcc-restore-v4.outputs.cache-hit != 'true' }}
      name: install ${{ inputs.gcc-version }}
      shell: bash
      run: |
        wget https://ftp.gnu.org/gnu/gcc/${{ inputs.gcc-version }}/${{ inputs.gcc-version }}.tar.gz > /dev/null 2>&1
        tar -xvf ${{ inputs.gcc-version }}.tar.gz > /dev/null 2>&1

        cd ${{ inputs.gcc-version }}

        ./contrib/download_prerequisites > /dev/null
        ./configure --enable-languages=c,c++ -disable-multilib --with-system-zlib --prefix=/usr/local/${{ inputs.gcc-version }}

        make -j$(nproc)
        make install
    #######################################
    # save gcc to cache if cache miss occured
    - if: ${{ steps.gcc-restore-v3.outputs.cache-hit != 'true' && inputs.OS == 'ubuntu:18.04' }}
      name: gcc save
      uses: actions/cache/save@v3
      id: gcc-save-v3
      with:
        path: /usr/local/${{ inputs.gcc-version }}
        key: ${{ inputs.gcc-version }}-${{ inputs.OS }}
        
    - if: ${{ steps.gcc-restore-v4.outputs.cache-hit != 'true' && inputs.OS == 'ubuntu:20.04' }}
      name: gcc save
      uses: actions/cache/save@v4
      id: gcc-save-v4
      with:
        path: /usr/local/${{ inputs.gcc-version }}
        key: ${{ inputs.gcc-version }}-${{ inputs.OS }}
    #######################################
    - name: Build SimEng
      shell: bash
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DSIMENG_ENABLE_TESTS=ON -DCMAKE_C_COMPILER=/usr/local/${{ inputs.gcc-version }}/bin/gcc -DCMAKE_CXX_COMPILER=/usr/local/${{ inputs.gcc-version }}/bin/c++ -DSIMENG_USE_EXTERNAL_LLVM=ON -DLLVM_DIR=/usr/lib/llvm-14 -GNinja
        cmake --build build -j $(nproc)

        sudo cmake --build build --target install
        echo "~~~~ BUILT SIMENG ~~~~"

        # sudo cmake --build build --target test ARGS="--output-on-failure"
        # echo "~~~~ TESTS DONE ~~~~"