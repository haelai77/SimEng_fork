name: setup gcc
description: installs dependencies and correct gcc version to build and test simeng

inputs:
  LLVM-VERSION: 
    required: true
  OS:
    required: true
  gcc-version:
    required: true

runs:
  using: 'composite'
  steps:
    #######################################
    # install dependencies required (cmake, etc)
    #######################################

    - name: install dependencies
      uses: ./.github/actions/setup_deps
      with:
        OS: ${{ inputs.OS }}

    - name: install cmake
      shell: bash
      run: |
        dnf install cmake

    - if: ${{ contains(fromJson('["gcc-7", "gcc-8"]'), inputs.gcc-version) }}
      name: restore gcc
      uses: actions/cache/restore@v4
      id: gcc-restore-v4
      with: 
        path: /usr/local/${{ inputs.gcc-version }}.5.0
        key: ${{ inputs.gcc-version }}-${{ inputs.OS }}
    
    - if: ${{ steps.gcc-restore-v4.outputs.cache-hit != 'true' }}
      name: install gcc
      shell: bash
      run: |
        if [[ " gcc-9 gcc-10 " =~ (^|[[:space:]])${{inputs.gcc-version}}($|[[:space:]]) ]]; then
          dnf install -y gcc-toolset-$( echo ${{ inputs.gcc-version }} | cut -d '-' -f 2)
          echo "COMPILER_DIR=/opt/rh/gcc-toolset-$( echo ${{ inputs.gcc-version }} | cut -d '-' -f 2)/root/usr/bin" >> $GITHUB_ENV

        else
          GCC_VER="${{ inputs.gcc-version }}.5.0"

          wget https://ftp.gnu.org/gnu/gcc/$GCC_VER/$GCC_VER.tar.gz > /dev/null 2>&1
          tar zxf $GCC_VER.tar.gz
          cd $GCC_VER
          ./contrib/download_prerequisites
          cd ..
          mkdir gcc-build
          cd gcc-build
          ../$GCC_VER/configure --enable-languages=c,c++ --disable-multilib --prefix=/usr/local/$GCC_VER
          make -j$(nproc)
          make install

          echo "COMPILER_DIR=/usr/local/$GCC_VER/bin" >> $GITHUB_ENV
        fi

    - if: ${{ steps.gcc-restore-v4.outputs.cache-hit != 'true' }}
      name: save gcc
      uses: actions/cache/save@v4
      id: gcc-save-v4
      with: 
        path: /usr/local/${{ inputs.gcc-version }}.5.0
        key: ${{ inputs.gcc-version }}-${{ inputs.OS }}

    #######################################
    - name: Build SimEng
      shell: bash
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DSIMENG_ENABLE_TESTS=ON -DSIMENG_OPTIMIZE=ON -DCMAKE_C_COMPILER=${{ env.COMPILER_DIR }}/gcc \
          -DCMAKE_CXX_COMPILER=${{ env.COMPILER_DIR }}/g++

        cmake --build build -j $(nproc)

        cmake --build build --target install
