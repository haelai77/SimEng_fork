name: setup gcc
description: installs dependencies and correct gcc version to build and test simeng

inputs:
  LLVM-VERSION: 
    required: true
  OS:
    required: true
  gcc-version:
    required: true

runs:
  using: 'composite'
  steps:
    #######################################
    # install dependencies required (cmake, etc)
    #######################################

    - name: install dependencies
      uses: ./.github/actions/setup_deps
      with:
        OS: ${{ inputs.OS }}

    - name: install cmake
      shell: bash
      run: |
        dnf install cmake

    - name: install gcc
      shell: bash
      run: |
        if [[ " gcc-9 gcc-10 " =~ (^|[[:space:]])${{inputs.gcc-version}}($|[[:space:]]) ]]; then
          dnf install -y gcc-toolset-$( echo ${{ inputs.gcc-version }} | cut -d '-' -f 2)
          scl enable gcc-toolset-$( echo ${{ inputs.gcc-version }} | cut -d '-' -f 2) bash
        else
          wget https://ftp.gnu.org/gnu/gcc/${{ inputs.gcc-version }}/gcc-${{ inputs.gcc-version }}.tar.gz
          tar zxf ${{ inputs.gcc-version }}.tar.gz
          cd ${{ inputs.gcc-version }}
          ./contrib/download_prerequisites
          cd ..
          mkdir gcc-build
          cd gcc-build
          ../${{ inputs.gcc-version }}/configure --enable-languages=c,c++ --disable-multilib --prefix=/usr/local/${{ inputs.gcc-version }}
          make -j$(nproc)
          make install
        fi

    #######################################
    - name: Build SimEng
      shell: bash
      run: |
        if [[ " gcc-9 gcc-10 " =~ (^|[[:space:]])${{inputs.gcc-version}}($|[[:space:]]) ]]; then
          gcc_path="/usr/bin/gcc"
          c++_path="/usr/bin/c++"
        else
          gcc_path="/usr/local/${{ inputs.gcc-version }}/bin/gcc"
          c++_path="/usr/local/${{ inputs.gcc-version }}/bin/c++"
        fi
        
        cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DSIMENG_ENABLE_TESTS=ON -DSIMENG_OPTIMIZE=ON -DCMAKE_C_COMPILER=$gcc_path -DCMAKE_CXX_COMPILER=$c++_path

        cmake --build build -j $(nproc)

        sudo cmake --build build --target install
